precision mediump float;

uniform float u_time;

uniform vec2 u_resolution;
uniform vec2 u_mouse;

// 2D rotation function
mat2 rot2D(float a) {
  return mat2(cos(a), -sin(a), sin(a), cos(a));
}

float sdBox(vec3 p, vec3 b)
{
  vec3 q = abs(p) - b;

  return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

// Scene distance
float map(vec3 p) {
  p.z += u_time * .4; // Forward movement

  // Space repetition
  p.xy = fract(p.xy) - .5; // spacing: 1
  p.z = mod(p.z, .25) - .150; // spacing: .25

  return sdBox(p, vec3(0.12));
}

vec3 palette(float t) {
  vec3 a = vec3(0.1, 0.6, 0.4);
  vec3 b = vec3(0.5, 0.7, 0.5);
  vec3 c = vec3(0.5, 0.6, 0.6);
  vec3 d = vec3(0.263, 0.516, 0.557);

  return a + b * cos(6.28318 * (c * t + d));
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  vec2 uv = (fragCoord * 2. - u_resolution.xy) / u_resolution.y;
  vec2 m = (u_mouse * 2. - u_resolution.xy) / u_resolution.y;

  // Default circular motion
  m = m * .9 + vec2(cos(u_time * .2), sin(u_time * .3));

  // Initialization
  vec3 ro = vec3(0, 0, -1);
  vec3 rd = normalize(vec3(uv, 1.9));
  vec3 col = vec3(0);

  float t = 0.;
  float f = 0.;

  // Raymarching
  for (int i = 0; i < 22; i++) {
    vec3 p = ro + rd * t;

    p.xy *= rot2D(t * .325 * m.x);
    p.y += sin(t * (m.y + 1.) * .5) * .35;

    float d = map(p);
    t += d;
    if (d < .001 || t > 100.) break;

    f = float(i);
  }

  // Coloring
  col = palette(t * .03 + f * .006);

  fragColor = vec4(col, 1);
}

void main() {
  mainImage(gl_FragColor, gl_FragCoord.xy);
}
